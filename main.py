#!/usr/bin/env python3
from Deploy import Deploy
from mclp import mclp

from sklearn.datasets import make_moons
import matplotlib.pyplot as plt
from matplotlib.figure import figaspect
from matplotlib.figure import Figure
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import Circle, PathPatch
import mpl_toolkits.mplot3d.art3d as art3d

import numpy as np
import os
import random
import pandas as pd
import argparse
import time


def unique(a):
	order = np.lexsort(a.T)
	a = a[order]
	diff = np.diff(a, axis=0)
	ui = np.ones(len(a), 'bool')
	ui[1:] = (diff != 0).any(axis=1) 
	return a[ui]

def printOutput(np_arr, elapsed_time=None):
	# print(end='#')
	print(elapsed_time, end='#')
	[[print(coord, end=';') if (idc)%np_arr.shape[1] == np_arr.shape[1]-1 else print(coord, end=',') for idc, coord in enumerate(p)] for p in np_arr]

def main(args):
	start_time = time.time()
	parser = argparse.ArgumentParser(description='Generate optimal coverage deployment')
	parser.add_argument('-p', '--pos', help='set ground positions: x1,y1,z1;x2,y2,z2;x3,y3,z3;', type=str, required=True)
	# parser.add_argument('-d', '--distance', help='max coverage diameter at a zero elevation difference', type=float, required=True)
	parser.add_argument('-sr', '--maxShortRange', help='The short communication range (UAV to UE)', required=False, type=float, default=84.66)
	parser.add_argument('-lr', '--maxLongRange', help='The long communication range (UAV to UAV)', required=False, type=float, default=169.32)

	parser.add_argument('-a', '--altitude', help='altitude that the UAVs will be placed', type=float, required=True)
	parser.add_argument('-t', '--tier', help='number of required tiers', type=int, required=False, default=1)
	parser.add_argument('-m', '--max', help='maximum number of available UAVs', type=int, required=False, default=0)
	parser.add_argument('-v', '--view', help='plot results found', type=bool, required=False, nargs='?', const=True, default=False)

	args = parser.parse_args(args)

	posInput = vars(args)['pos']
	altitude = vars(args)['altitude']

	# distance = vars(args)['distance']
	distance = 1000
	shortDistance = vars(args)['maxShortRange']
	longDistance = vars(args)['maxLongRange']

	numTiers = 1
	if vars(args)['tier']:
		numTiers = vars(args)['tier']

	maxUAVs = 0
	if int(vars(args)['max']) and int(vars(args)['max']) > 0:
		maxUAVs = int(vars(args)['max'])

	countComma = posInput.count(',')
	countSemcol = posInput.count(';')
	if countComma%2 != 0 or countComma != (countSemcol*2):
		print('input error: --pos')
		print(',',	countComma)
		print(';',	countSemcol)
		os.system('./main.py -h')
		exit()

	UElocatioins = []
	[UElocatioins.append([float(c) for c in coordstr.split(',')]) for coordstr in posInput.split(';')[:-1]]
	UElocatioins = np.array(UElocatioins)

	# printOutput(UElocatioins)
	def costCalculation(posA, posB):
		from scipy.spatial import distance
		return distance.euclidean(posA,posB)

	# Give a set of ground nodes locations
	# Give the connection cost threshold value (distance, sinr, rssi, ...) between each pair
	dp = Deploy()
	# dp.setRadius(distance) # cost between a skynode and a ground node
	dp.setShortRadius(shortDistance) # cost between a skynode and a ground node
	dp.setLongRadius(longDistance) # cost between a skynode and a ground node

	dp.setAltitude(altitude) # altitude that the UAVs will be placed
	dp.setCostCalculation(costCalculation)
	# dp.setCoverageAngle(50, unit='radians') # antenna coverage angle
	dp.setPointsOfInterest(UElocatioins)
	dp.calculateTadpole()

	tiers = {}

	if numTiers == 1:
		# ----- method 1 -----
		# if maxUAVs < len(dp.getTadpole()) and maxUAVs > 0:
			# dp.set_maxOptTadpole(maxUAVs)
		# dp.calculateFroglet()
		# --------------------

		# ----- method 2 -----
		dp.calculateFroglet()
		if maxUAVs > 0 and maxUAVs < len(dp.getFroglet()):
			dp.set_maxOptFroglet(maxUAVs)
		# --------------------

		tiers[0] = dp.getFroglet()
	else: # for more than 1 tier
		# dp.setLongRadius(shortDistance) # changing the range of the long radius as the upper tiers are composes by the same kind of nodes

		if maxUAVs > 0 and maxUAVs < len(dp.getTadpole()):
			dp.set_maxOptTadpole(maxUAVs)
		tiers[0] = dp.getTadpole()


	# tiers[0] = np.array([[77.43681260308381,72.74702837300221,6.5],[71.73577816222846,53.69579652138079,6.5],[62.68257554158404,104.73679192597434,6.5],[38.99287023951905,62.42295866348836,6.5]])

	altitudeDiff = altitude
	for i in range(numTiers-1):
		altitudeDiff *= 1.2
		dp.setAltitude(altitudeDiff) # altitude that the UAVs will be placed
		dp.setPointsOfInterest(tiers[i])
		dp.calculateTadpole()

		if len(tiers[i]) <= 1:
			break
		if i < numTiers-2:
			tiers[i+1] = dp.getTadpole()
		else:
			dp.calculateFroglet()
			tiers[i+1] = dp.getFroglet()
			
	res = []
	for i in tiers:
		for j in tiers[i]:
			res.append(j)
	res = np.array(res)
	
	res = unique(res)

	if len(res) == 1:
		res[0] = [UElocatioins[:,0].mean(), UElocatioins[:,1].mean(), res[:,2].mean()]

	# printing output:
	elapsed_time = time.time() - start_time
	printOutput(res, elapsed_time=elapsed_time)

	if not bool(vars(args)['view']):
		mainRes = {
			'distance':int(dp.avg_distance(UElocatioins[:,0],UElocatioins[:,1])),
			'uavs':len(res),
			'uelocatioins':len(UElocatioins),
			'altitude':altitude
		}
		return mainRes
	# ------------------------------ Plotting ------------------------------
	# print('Tadpole:', dp.getTadpole().shape)
	# print('Froglet:', res.shape)
	# print('UElocatioins:', UElocatioins.shape)

	w, h = figaspect(1)
	w *= 1.6
	# w *= 1
	h = w

	# fig = plt.figure(figsize=(w,h))
	# ax = fig.add_subplot(111, projection='3d')
	# # ax.set_zlim(0,altitude*1.5)
	# # ax.view_init(azim=180, elev=90)
	# # ax.view_init(azim=45, elev=40)
	# ax.view_init(azim=100, elev=60)

	fig, ax = plt.subplots(figsize=(w,h))
	# fig, ax = plt.subplots()
	ax = fig.add_subplot(111)
	ax.axis('equal')

	ax.set_title('avg_distance:'+str(int(dp.avg_distance(UElocatioins[:,0],UElocatioins[:,1])))+'  #UAVs:'+str(len(res)))

	# ax.set_xlim(-10,500)
	# ax.set_ylim(-10,500)
	ax.grid(linestyle='--')
	ax.set_axisbelow(True)

	ax.tick_params(axis='both',which='both',left=False,top=False,right=False,bottom=False,
					# labelleft=False,labeltop=False,labelright=False,labelbottom=False
					)


	# [ax.scatter(i[0],i[1], 1.5, c='red', marker='.', s=100, alpha=0.4) for i in UElocatioins] # 3D
	[ax.scatter(i[0],i[1], c='red', marker='.', s=100, alpha=0.4) for i in UElocatioins] # 2D
	for t in tiers:
		color = f'C{t+2}'
		# [ax.scatter(i[0],i[1],i[2], c=color, marker='o', s=int(100*(t+1)), alpha=0.8) for i in tiers[t]] # 3D
		[ax.scatter(i[0],i[1], c=color, marker='o', s=int(100*(t+1)), alpha=0.8) for i in tiers[t]] # 2D
		[plt.text(i[0],i[1], f'({int(i[0])}, {int(i[1])})', fontsize=8) for i in tiers[t]] # 2D


	# [ax.scatter(i[0],i[1], i[2], c='green', marker='o', s=100, alpha=0.8) for i in dp.getTadpole()]
	# if len(dp.getTadpoleNew()) > 0:
	# 	[ax.scatter(i[0],i[1], i[2], c='blue', marker='*', s=100, alpha=0.8) for i in dp.getTadpoleNew()]

	
	# ------- plot circle 2D -------
	def plotCircle(ax, point, r, color=None):
		if not color:
			color = 'black'
		theta = np.linspace(0, 2*np.pi, 100)
		# r = np.sqrt(r)
		x1 = r*np.cos(theta) + point[0]
		x2 = r*np.sin(theta) + point[1]
		ax.plot(x1, x2, c=color, alpha=0.2, linewidth=1.5)

	realRadiusRange = (max(0.1,((longDistance)**2)-(altitude**2))**0.5)
	[plotCircle(ax,i, realRadiusRange) for i in res]
	# [plotCircle(ax,i,dp.getCost()) for i in dp.getTadpole()]

	
	# ------- plot circle 3D -------
	# tierIndex = 0
	# for i in tiers[tierIndex]:
	# 	# Draw a circle on the x=0 'wall'
	# 	realRadiusRange = (max(0.1,((longDistance)**2)-(altitude**2))**0.5)
	# 	# return realRadiusRange

	# 	p = Circle((i[0],i[1]), realRadiusRange, color='black', alpha=0.15, lw=0.5)
	# 	ax.add_patch(p)
	# 	altd = tiers[tierIndex-1][-1][-1] if (tierIndex-1) > -1 else 0
	# 	art3d.pathpatch_2d_to_3d(p, z=altd, zdir="z")
		
	# 	# p = Circle((i[0],i[1]), ((((shortDistance/2)**2)+(altitude**2))**0.5), color='black', alpha=0.15, lw=0.5)
	# 	# ax.add_patch(p)
	# 	# altd = altitude
	# 	# art3d.pathpatch_2d_to_3d(p, z=altd, zdir="z")

	plt.show()
	return ax, plt
	# plt.pause(2)
	# plt.close()

if __name__ == '__main__':
	import sys
	main(sys.argv[1:])


# ----------------------- command samples -----------------------
# ./main.py -p "454.18482627961885,348.1421260081223,1.5;352.7114247789603,499.56152828183116,1.5;582.219164098506,919.6020602287153,1.5;515.069494518036,207.43845276885577,1.5;619.6934023229038,279.77476999501675,1.5;505.86680758472266,296.04847351557396,1.5;681.756789714007,777.1565269892374,1.5;782.100729742981,572.0237727930323,1.5;497.2243456396896,414.1840507428602,1.5;279.4008752069178,530.1746847561151,1.5;546.227428691992,391.59835985384643,1.5;584.8025493816153,583.0393291410137,1.5;111.28413171330652,703.7302569030021,1.5;925.4547837023554,572.5794728287665,1.5;897.0418556913464,-66.75227879125578,1.5;671.0862242825324,614.4243292361512,1.5;784.4548636810308,302.63365690135436,1.5;674.2911298765549,735.9718598239616,1.5;679.686285119318,729.0008538028632,1.5;124.0345727343643,3.1435649496488622,1.5;188.67525588480936,470.6488210782977,1.5;401.02529078979796,165.39411080576411,1.5;541.1834517266947,617.865614217184,1.5;487.807153415155,727.4744125144816,1.5;554.6104818302595,519.1748788799811,1.5;852.5921894385058,403.64330156307915,1.5;464.2853655656444,367.0396664572874,1.5;411.50984525132225,161.42592055553922,1.5;283.66924629151083,713.6581041512852,1.5;48.54884032669588,601.3847656143371,1.5;619.9842473954938,586.2182974764922,1.5;200.93640488001625,455.6119546671794,1.5;482.5518989130377,723.7203649691178,1.5;380.7476045306378,358.0560474044999,1.5;449.0946988127296,487.02054687121176,1.5;204.7519894852672,570.0976614980689,1.5;307.11974079284937,667.2495576357837,1.5;111.19247142199896,554.6748131608765,1.5;369.8911336428761,739.2085455876464,1.5;766.7107644374518,719.7494866462881,1.5;230.7499606198777,680.5810882477872,1.5;233.6735927504323,378.9752864243628,1.5;568.3918244181605,235.81604427780155,1.5;688.1027375401145,545.0053005783791,1.5;395.10218306548904,142.54153717158272,1.5;432.5697872720596,353.72700807179365,1.5;527.1287896496993,289.4938057947034,1.5;177.53086883498378,703.2567544547279,1.5;323.7997438697839,462.801001046543,1.5;655.6979426619134,429.3536885485077,1.5;" -d 150 -a 21.2 -v
# ./main.py -p "611.4174799238938,615.6852852418259,1.5;912.0150747039711,375.82496819746353,1.5;511.6451603122466,693.2354014264324,1.5;590.0737235402185,600.0844240580656,1.5;803.9762094279583,328.3642012568639,1.5;602.1348157601911,679.7828945619824,1.5;235.12394820589253,748.8202467071302,1.5;894.4797874178896,612.9632408371333,1.5;647.584483346006,492.44557909626525,1.5;494.5426826889229,69.92478859529547,1.5;560.0234711345752,545.6166648434191,1.5;376.8353628420087,453.1546610208893,1.5;838.5540507975004,463.9740506593705,1.5;323.46381451750716,464.2912272229233,1.5;253.29272968901554,424.9015849123266,1.5;376.08925859686065,600.7593396056888,1.5;858.2451136921951,869.2028337002955,1.5;505.8050794250863,787.3809349135423,1.5;997.6735799110211,450.93352111298566,1.5;731.430734522005,474.51539493522415,1.5;828.7254143662731,306.55538817440095,1.5;434.8879302766885,576.8640857267826,1.5;737.0790886321995,480.87524906902485,1.5;852.1702346556751,672.9569582208139,1.5;24.83848059015503,872.6416522456428,1.5;166.4908422528096,416.8570755630682,1.5;280.12191130490316,262.9394798966222,1.5;877.5215525358271,771.9275190639053,1.5;617.9897674902714,470.2178906858188,1.5;664.9462083685102,428.14609677110417,1.5;209.49565683070978,519.7307874324492,1.5;679.8878466675015,452.629654841792,1.5;135.6745638737691,522.704558710109,1.5;492.9143753767866,247.2212785128528,1.5;763.6227503606481,213.00120528806133,1.5;484.46780379124743,613.5421304487915,1.5;399.1491198174548,979.932616007532,1.5;612.1905505900539,411.6453376232871,1.5;601.3909409850932,361.3246605529766,1.5;259.81194485540533,943.6278835638759,1.5;1107.546877637781,-76.26426692135226,1.5;643.4710829140968,716.3357615624179,1.5;394.4855917127429,166.28475226525978,1.5;269.59284680690945,678.3557353012228,1.5;293.7784071833013,389.8151850998406,1.5;263.5203778159664,531.806281813185,1.5;803.4674780724913,559.2650588049826,1.5;876.2637468344062,338.1957340195437,1.5;416.56296378921803,463.89546618695533,1.5;241.99146817247885,389.8358300647724,1.5;" -d 150 -a 21.2
# ./main.py -p "630.8719702628755,880.4361674102989,1.5;328.10127478410243,431.7710787171474,1.5;238.54313500063972,394.8526521212281,1.5;700.2082620802005,465.73336434350654,1.5;12.61575532086448,924.7153356768856,1.5;326.0294277711157,303.26637398094726,1.5;883.319626556909,518.3996906254744,1.5;436.5652610862827,485.73928928230356,1.5;602.7419601802432,390.0698627432828,1.5;324.6008455232351,708.854950173914,1.5;561.5011118238233,669.3693077805166,1.5;436.4643521377909,547.5784075944484,1.5;310.0722212770514,697.6898308807483,1.5;261.90735123106606,-64.37369795878703,1.5;384.49920958291983,210.02498378007772,1.5;389.5082697239037,966.7149940732502,1.5;757.7168897935404,439.475685656599,1.5;192.52152807741453,1001.6676078560257,1.5;80.94909945450894,364.8477060208206,1.5;310.480252489225,281.224242932944,1.5;416.0039193229292,906.9826366036255,1.5;858.0189043728951,-147.79367099230717,1.5;460.6608447101196,711.2803035026909,1.5;13.164999436612504,720.350099348366,1.5;28.32691654952731,102.1810137769699,1.5;594.0391509119831,980.1357788209833,1.5;442.97482798218334,491.2695772120227,1.5;199.95113412346672,720.8371163748383,1.5;585.8313461988773,370.9388064250622,1.5;594.6591485507386,168.77610837944945,1.5;46.883109364407744,152.6405017846647,1.5;428.200645083514,322.22101870834695,1.5;49.461033214070426,222.885559481746,1.5;512.1834084635814,1067.5135191380466,1.5;244.17329827614702,587.9298247748465,1.5;172.69504341163855,1058.0739275511874,1.5;676.7891742258084,406.00115511808514,1.5;274.41564476530016,462.873930612508,1.5;379.4558415083327,535.9044364925927,1.5;554.030537502575,893.1942183441286,1.5;688.6751109329427,641.7674128016428,1.5;197.73075846327703,358.48491729556423,1.5;120.70875820663991,376.9437749471236,1.5;113.42701951678777,533.3394773213777,1.5;563.6139024373607,-91.64725624225264,1.5;713.9406074298007,203.0090722630826,1.5;814.733782494274,153.35711106971894,1.5;787.9869226981309,303.58668945513523,1.5;537.3623171813443,166.01034726326816,1.5;354.90493730890523,39.233758806615754,1.5;" -d 150 -a 21.2
# ./main.py -p "554.5604653927057,424.0479385278346,1.5;339.01269388251694,169.2434202735496,1.5;229.6165666865486,349.46284839557063,1.5;354.3274326353925,338.4489514165395,1.5;437.2883440503051,100.04236998768636,1.5;783.6464816399875,293.8939773266791,1.5;429.2919297434147,561.2113994708964,1.5;186.746469951598,675.9402725719851,1.5;560.2506339625004,465.6630840791048,1.5;916.7889480174845,-135.1889846524441,1.5;371.39856528634715,696.4699275123435,1.5;672.646365129641,433.88587920469166,1.5;446.5063721755747,383.17860783740355,1.5;251.8008051098861,593.4236421438411,1.5;507.97846676154677,703.5642241447417,1.5;153.03920860187577,492.0993477440482,1.5;458.8927997426436,695.2041403678192,1.5;262.08632166297144,708.6666981277523,1.5;383.6515380157044,814.9703791236154,1.5;321.3780463937005,170.05417841708208,1.5;445.7951684810322,468.6824796718428,1.5;689.9817145765747,565.9332862070188,1.5;428.22597137400146,525.5066485072773,1.5;-75.26848398345408,892.1286116562657,1.5;729.4246133557615,265.26510543848883,1.5;373.26820905018656,817.8646488298167,1.5;852.78609687475,641.7492899318127,1.5;651.4500332358502,178.20655782951678,1.5;509.87929015958593,565.802783756574,1.5;163.01728783012356,687.0856654310896,1.5;968.449952938672,629.6834143575236,1.5;663.243221635814,403.40336266144396,1.5;617.9689173971362,449.3740161997435,1.5;237.27381118656047,248.27234766263928,1.5;391.1164049269769,651.5994852939784,1.5;141.00124552318658,373.0769914209216,1.5;557.9386812272368,418.92652711655523,1.5;614.9583644719607,344.20626674604483,1.5;302.14714380128294,538.0337071647443,1.5;566.7977434702447,444.98868382182303,1.5;741.8357459895412,799.6461147605547,1.5;797.4728676587422,592.9197442042531,1.5;218.31964058528308,762.4787917429762,1.5;562.3516317782585,398.47342083657463,1.5;264.5998777423039,496.55144463090045,1.5;668.5637606856084,694.1154323425196,1.5;758.7673381766292,584.0808943807997,1.5;392.78850120652646,176.54296984699278,1.5;386.2732949389094,474.1871635829635,1.5;360.716722121873,399.128118194174,1.5;" -d 150 -a 21.2
# ./main.py -p "157.72752,1.35713;4.58975,23.04701;97.04254,76.15636;10.00000,26.01837;90.15166,84.38287;140.21466,65.83305;99.16364,19.17530;29.16364,13.17530;99.16364,89.17530;57.49134,54.41188;73.26811,44.60490;12.16364,1.17530;25.18588,0.00000;" -d 150 -a 21.2 -v
# ./main.py -p "95.82293481,83.72569632;40.42161652,42.57404893;106.33937608,41.0847209;122.15338683,88.42966699;37.92119476,73.10061194;39.24415563,91.35768367;32.54975919,65.95877533;94.79447284,116.20871379;36.3784557,33.49507483;17.69638879,24.03855295" -d 150 -a 21.2
# ./main.py -p "65.91018903,98.62297763,1.5;50.39484214,60.9712284,1.5;76.44405577,47.37046773,1.5;33.27374414,31.23787994,1.5;85.29110873,73.44537979,1.5;68.11354958,55.45892658,1.5;-1.06917666,103.34926562,1.5;63.94574005,112.52024089,1.5;32.1175471,58.5619233,1.5;83.14060132,49.72293825,1.5;" -d 30 -a 5 -v
# ./main.py -p "79.81897931,98.36964462;101.17418379,34.05137845;60.18390321,09.23126983;22.71256601,96.57589163;95.20106239,1.83207606;5.31941627,41.22058044;59.34038149,8.67976471;89.52168842,85.15769569;83.09276855,39.4450127;56.97803725,34.02265272;50.27062658,82.38082217;67.14386452,28.79400115;37.13590902,72.78682087;19.77355803,97.66292738;"

# ./main.py -p "0,0,1.500000;0,200,1.500000;200,0,1.500000;200,200,1.500000;" -d 120 -a 10 -t 1 -v
# ./main.py -p "0,0,1.500000;400,100,1.500000;0,100,1.500000;400,0,1.500000;" -d 120 -a 10 -t 1 -v
# ./main.py -p "0,0,1.500000;8000,50,1.500000;0,50,1.500000;8000,0,1.500000;" -d 120 -a 10 -t 1 -v

# ./main.py -p "0,0,1.500000;8000,50,1.500000;0,50,1.500000;8000,0,1.500000;" -lr 300 -sr 50 -a 40 -v -t 5
# ./main.py -p "0,0,0;200,0,0;100,173.2050807568877294,0;100.55347266160646,70.31141670263102,0;" -lr 300 -sr 50 -a 40 -v -t 5


	# UElocatioins = np.array([[99.6670343,26.53578494]
	# ,[42.54963431,96.8915957]
	# ,[78.02035467,76.77840582]
	# ,[32.91484395,68.37755625]
	# ,[44.93122187,46.7064704]
	# ,[56.71683865,77.47903628]
	# ,[38.41197455,84.14397182]
	# ,[21.09272176,32.06258816]
	# ,[85.92399249,11.24088332]
	# ,[17.08927386,47.24035099]])

	# UElocatioins = np.array([[ 93.92387133,91.42723358],53.13361605,93.95615215;120.48001521,23.32929578;12.47087044,13.47950519;74.11128889,65.55629005;32.22097343,29.16670529;52.70501032,45.56751617;13.8230546,71.89350954;55.98661041,42.81340872;64.92609551,70.10758931];
	# numberUE = len(UElocatioins)


# UElocatioins = np.array([[454.18482627961885,348.1421260081223,1.5],
# 	[352.7114247789603,499.56152828183116,1.5],
# 	[582.219164098506,919.6020602287153,1.5],
# 	[515.069494518036,207.43845276885577,1.5],
# 	[619.6934023229038,279.77476999501675,1.5],
# 	[505.86680758472266,296.04847351557396,1.5],
# 	[681.756789714007,777.1565269892374,1.5],
# 	[782.100729742981,572.0237727930323,1.5],
# 	[497.2243456396896,414.1840507428602,1.5],
# 	[279.4008752069178,530.1746847561151,1.5],
# 	[546.227428691992,391.59835985384643,1.5],
# 	[584.8025493816153,583.0393291410137,1.5],
# 	[111.28413171330652,703.7302569030021,1.5],
# 	[925.4547837023554,572.5794728287665,1.5],
# 	[897.0418556913464,-66.75227879125578,1.5],
# 	[671.0862242825324,614.4243292361512,1.5],
# 	[784.4548636810308,302.63365690135436,1.5],
# 	[674.2911298765549,735.9718598239616,1.5],
# 	[679.686285119318,729.0008538028632,1.5],
# 	[124.0345727343643,3.1435649496488622,1.5],
# 	[188.67525588480936,470.6488210782977,1.5],
# 	[401.02529078979796,165.39411080576411,1.5],
# 	[541.1834517266947,617.865614217184,1.5],
# 	[487.807153415155,727.4744125144816,1.5],
# 	[554.6104818302595,519.1748788799811,1.5],
# 	[852.5921894385058,403.64330156307915,1.5],
# 	[464.2853655656444,367.0396664572874,1.5],
# 	[411.50984525132225,161.42592055553922,1.5],
# 	[283.66924629151083,713.6581041512852,1.5],
# 	[48.54884032669588,601.3847656143371,1.5],
# 	[619.9842473954938,586.2182974764922,1.5],
# 	[200.93640488001625,455.6119546671794,1.5],
# 	[482.5518989130377,723.7203649691178,1.5],
# 	[380.7476045306378,358.0560474044999,1.5],
# 	[449.0946988127296,487.02054687121176,1.5],
# 	[204.7519894852672,570.0976614980689,1.5],
# 	[307.11974079284937,667.2495576357837,1.5],
# 	[111.19247142199896,554.6748131608765,1.5],
# 	[369.8911336428761,739.2085455876464,1.5],
# 	[766.7107644374518,719.7494866462881,1.5],
# 	[230.7499606198777,680.5810882477872,1.5],
# 	[233.6735927504323,378.9752864243628,1.5],
# 	[568.3918244181605,235.81604427780155,1.5],
# 	[688.1027375401145,545.0053005783791,1.5],
# 	[395.10218306548904,142.54153717158272,1.5],
# 	[432.5697872720596,353.72700807179365,1.5],
# 	[527.1287896496993,289.4938057947034,1.5],
# 	[177.53086883498378,703.2567544547279,1.5],
# 	[323.7997438697839,462.801001046543,1.5],
# 	[655.6979426619134,429.3536885485077,1.5]])

	# numberUE = 50
	# UElocatioins = np.random.normal(500,250,numberUE*2)
	# UElocatioins = np.reshape(UElocatioins,(numberUE,2))

	# UElocatioins,_ = make_moons(numberUE,noise=20)

	# nl = []
	# for row in UElocatioins:
	# 	row = np.append(row, 1.5)
	# 	nl.append(row)
	# 	# print(row)
	# UElocatioins = np.array(nl)

# ---------------------------- output performance evaluation --------------------------------
# if not bool(vars(args)['view']):
# 	mainRes = {
# 		'distance':int(dp.avg_distance(UElocatioins[:,0],UElocatioins[:,1])),
# 		'uavs':len(res),
# 		'uelocatioins':len(UElocatioins),
# 		'distance':distance,
# 		'altitude':altitude,
# 	}
# 	# print(mainRes)
# 	return mainRes